;; WIP theme.

(deftheme kjb/test-theme
  "A test theme to play around with some colors/fonts")


(set-face-attribute 'default nil :family "Jetbrains Mono" :height 180)
;; Ookk so variable pitch mode is buffer local?
;; So it would need a hook for text-mode. Or I inherit.
(set-face-attribute 'variable-pitch nil :family "Baskerville" :height 300)
;; What if I just use baskerville for org-default? - Doesn't work


;;; TODO
;; VTERM stuff
;; Resolve the variable pitch stuff (you want less of it, probably just for org and txt mode?)
;; 
;; Borrowed heavily form poet: https://github.com/kunalb/poet/tree/master
(let ((fg "#161616")
      (bg "#e1d9c2")
      (emph "#222222")
      (sep "#eeeeee")
      (hlt "#efefef")
      (bg-hlt "#fff8e1")
      (muted "#795548")
      (meta "#4e342e")
      (link "#303f9f")
      (link-underline "#304ffe")
      (vlink-underline "#1a237e")
      (header "#770b0b")
      (button "#616161")
      (glyph "#673AB7")
      (cursor "#333333")
      (paren-match-bg "#ff1744")
      (paren-match-fg "#ffffff")
      (search-fg "#c2185b")
      (search-bg "#ffffff")
      (search-fail-bg "#f8bbd0")
      (tooltip-fg "#111111")
      (tooltip-bg "#fff176")
      (shadow "#999999")
      (secondary-bg "#fff59d")
      (trailing-bg "#ff8a65")
      (fci "#dedede")
      (lazy-hlt-fg "#000000")
      (lazy-hlt-bg "#ffffff")
      (evil-rep-fg "#ffffff")
      (evil-rep-bg "#4e342e")
      (mode-line-fg "#111111")
      (header-line-bg "#e0e0e0")
      (mode-line-hlt "#ffffff")
      (mode-line-inactive "#888888")
      (error "#df5286")
      (builtin "#795548")
      (string "#6C3082")
      (org-date "#388E3C")
      (org-drawer "#49838f")
      (function-name "#259C9D")
      (keyword "#bf360c")
      (constant "#0288D1")
      (type "#3f51b5")
      (variable "#455A64")
      (org-meta "#8D6E63")
      (org-document-info "#795548")
      (org-table "#e0e0e0")
      (org-quote-fg "#4A148C")
      (org-quote-bg "#e0e0e0")
      ;; (org-date "#444444")
      (org-title "#B71C1C")
      (org-title-underline "#aaaaaa")
      (org-checkbox "#aaaaaa")
      (org-scheduled "#333333")
      (org-scheduled-today "#111111")
      (org-done "#388E3C")
      (org-todo "#BF360C")
      (org-tag "#777777")
      (org-block-line "#c7c7c7")
      (org-block-bg "#e0e0e0")
      (org-agenda-structure-fg "#555555")
      (org-agenda-structure-bg "#e0e0e0")
      (org-agenda-today-fg "#000000")
      (org-agenda-today-bg "#eeeeee")
      (org-special-keyword "#777777")
      (org-sched-prev "#3f0000")
      (org-agenda-done "#777777")
      (hl-line "#efefef")
      (linum-hlt "#555555")
      (linum "#aaaaaa")
      (markdown-markup "#8D6E63")
      (markdown-metadata "#777777")
      (markdown-language "#7b1fa2")
      (markdown-list "#000000")
      (markdown-code-bg "#e0e0e0")
      (markdown-pre-bg "#e0e0e0")
      (markdown-header-delimiter "#8D6E63")
      (imenu "#4e342e"))
 (custom-theme-set-faces 'kjb/test-theme
  `(default ((t (:background ,bg :foreground ,fg))))
  `(italic ((t (:foreground ,emph :slant italic))))
  `(highlight ((t (:background ,hlt :overline nil))))
  `(region ((t (:background ,bg-hlt))))
  `(lsp-ui-sideline-global ((t (:background ,bg-hlt))))
  `(ansi-color-yellow ((t (:foreground "systemOrangeColor"))))
;; TODO this also inherits highlight and just gets f'd up by vertico. So i'm only correcting what doom did here
  ;; `(lsp-ui-sideline-symbol-info ((t (:inherit link))))
  ;; `(vertico-current ((t (:background ,bg-hlt :weight bold))))
  ;; TODO not sure I like this -> inherits highlight, should be ignored
  ;; `(embark-target ((t (:background ,bg-hlt :weight bold))))
  ;; TODO again might be just recovering from doom
  `(fringe ((t (:background ,bg))))
  `(button ((t (:inherit default :foreground ,button))))
  `(escape-glyph ((t (:foreground ,glyph))))
  `(link ((t (:underline (:color ,link-underline :style line) :foreground ,link))))
  `(link-visited ((t (:inherit link :foreground ,link :underline (:color ,vlink-underline :style line)))))
  `(cursor ((t (:background ,cursor))))
  `(show-paren-match ((t (:background ,paren-match-fg :foreground ,paren-match-bg))))
  `(isearch ((t (:foreground ,search-fg :background ,search-bg))))
  `(isearch-fail ((t (:background ,search-fail-bg))))
  `(query-replace ((t (:inherit isearch))))
  `(tooltip ((t (:inherit default :foreground ,tooltip-fg :background ,tooltip-bg))))
  `(shadow ((t (:foreground ,shadow))))
  `(secondary-selection ((t (:background ,secondary-bg))))
  `(trailing-whitespace ((t (:background ,trailing-bg))))
  `(lazy-highlight ((t (:foreground ,lazy-hlt-fg :background ,lazy-hlt-bg))))
  `(next-error ((t (:inherit region))))
  `(window-divider ((t (:background ,sep :foreground ,sep))))
  `(vertical-border ((t (:background ,sep :foreground ,sep))))
  `(evil-ex-substitute-replacement ((t (:foreground ,evil-rep-fg :background ,evil-rep-bg :underline nil))))
  `(minibuffer-prompt ((t (:inherit fixed-pitch :weight bold :foreground ,meta))))
  `(mode-line ((t (:inherit fixed-pitch :foreground ,mode-line-fg :background ,bg :overline ,sep :box (:line-width 3 :color ,bg)))))
  `(header-line ((t (:overline nil :background ,header-line-bg :box (:line-width 3 :color ,header-line-bg) :underline ,sep :inherit mode-line))))
  `(mode-line-buffer-id ((t (:weight bold))))
  `(mode-line-emphasis ((t (:weight bold))))
  `(mode-line-highlight ((t (:background ,mode-line-hlt))))
  `(mode-line-inactive ((t (:inherit mode-line :background ,bg :foreground ,mode-line-inactive :box (:color ,bg :line-width 3)))))
  `(error ((t (:foreground ,error :inherit fixed-pitch))))
  `(font-lock-comment-face ((t (:foreground ,muted :inherit fixed-pitch))))
  `(font-lock-builtin-face ((t (:foreground ,builtin :inherit fixed-pitch))))
  `(font-lock-string-face ((t (:inherit fixed-pitch :foreground ,string))))
  `(font-lock-function-name-face ((t (:inherit fixed-pitch :foreground ,function-name))))
  `(font-lock-keyword-face ((t (:inherit fixed-pitch :foreground ,keyword))))
  `(font-lock-comment-delimiter-face ((t (:inherit fixed-pitch :inherit font-lock-comment-face))))
  `(font-lock-constant-face ((t (:inherit fixed-pitch :foreground ,constant))))
  `(font-lock-doc-face ((t (:inherit fixed-pitch :inherit font-lock-string-face))))
  `(font-lock-preprocessor-face ((t (:inherit fixed-pitch :inherit font-lock-builtin-face))))
  `(font-lock-regexp-grouping-backslash ((t (:inherit fixed-pitch :inherit bold))))
  `(font-lock-regexp-grouping-construct ((t (:inherit fixed-pitch :inherit bold))))
  `(font-lock-type-face ((t (:foreground ,type :inherit fixed-pitch))))
  `(font-lock-variable-name-face ((t (:inherit fixed-pitch :foreground ,variable))))
  `(font-lock-warning-face ((t (:inherit error))))
;; TODO could use outline-N faces here instead and inherit.
  `(org-level-1 ((t (:inherit default :foreground ,header :weight semibold))))
  `(org-level-2 ((t (:inherit default :foreground ,header :weight semibold))))
  `(org-level-3 ((t (:inherit default :foreground ,header :weight semibold))))
  `(org-level-4 ((t (:inherit default :foreground ,header))))
  `(org-level-5 ((t (:inherit default :foreground ,header))))
  `(org-level-6 ((t (:inherit default :foreground ,header))))
  `(org-level-7 ((t (:inherit default :foreground ,header))))
  `(org-level-8 ((t (:inherit default :foreground ,header))))
  `(org-meta-line ((t (:inherit fixed-pitch :foreground ,org-meta))))
  `(org-document-info-keyword ((t (:inherit fixed-pitch :foreground ,org-document-info))))
  `(org-document-info ((t (:inherit default :foreground ,org-document-info))))
  `(org-drawer ((t (:inherit fixed-pitch :foreground ,org-drawer))))
  `(org-verbatim ((t (:inherit fixed-pitch))))
  `(org-code ((t (:inherit fixed-pitch))))
  `(org-table ((t (:inherit fixed-pitch :background ,org-table))))
  `(org-formula ((t (:inherit org-table))))
  `(org-verse ((t (:inherit default :foreground ,org-quote-fg :background ,org-quote-bg))))
  `(org-quote ((t (:inherit default :foreground ,org-quote-fg :background ,org-quote-bg))))
  `(org-hide ((t (:inherit fixed-pitch :foreground ,bg))))
  `(org-indent ((t (:inherit org-hide))))
  `(org-date ((t (:inherit (link fixed-pitch) :foreground ,org-date))))
  `(org-document-title ((t (:inherit fixed-pitch :foreground ,org-title :underline (:color ,org-title-underline)))))
  `(org-checkbox ((t (:inherit fixed-pitch :weight bold :foreground ,org-checkbox))))
  `(org-done ((t (:inherit fixed-pitch :foreground ,org-done))))
  `(org-todo ((t (:inherit fixed-pitch :foreground ,org-todo))))
  `(org-tag ((t (:inherit fixed-pitch :foreground ,org-tag))))
  `(org-block-begin-line ((t (:inherit fixed-pitch :background ,org-block-line))))
  `(org-block-end-line ((t (:inherit fixed-pitch :background ,org-block-line))))
  `(org-block ((t (:background ,org-block-bg :inherit fixed-pitch))))
  `(org-priority ((t (:inherit fixed-pitch :weight normal))))
  `(org-property-value ((t (:inherit fixed-pitch))))
  `(org-agenda-structure ((t (:foreground ,org-agenda-structure-fg :background ,bg :box (:line-width 3 :color ,bg) :underline ,org-agenda-structure-bg))))
  `(org-scheduled ((t (:foreground ,org-scheduled))))
  `(org-scheduled-today ((t (:foreground ,org-scheduled-today))))
  `(org-agenda-date-weekend ((t (:inherit org-agenda-structure))))
  `(org-agenda-date-today ((t (:box (:line-width 3 :color ,org-agenda-today-bg) :foreground ,org-agenda-today-fg :background ,org-agenda-today-bg))))
  `(org-special-keyword ((t (:inherit fixed-pitch :foreground ,org-special-keyword))))
  `(org-scheduled-previously ((t (:foreground ,org-sched-prev))))
  `(org-agenda-done ((t (:foreground ,org-agenda-done))))
  `(org-footnote ((t (:foreground ,link))))
  `(hl-line ((t (:background ,hl-line))))
  `(linum-highlight-face ((t (:inherit fixed-pitch :foreground ,linum-hlt))))
  `(linum ((t (:inherit fixed-pitch :foreground ,linum))))
  `(line-number ((t (:inherit fixed-pitch :foreground ,linum))))
  `(line-number-current-line ((t (:inherit fixed-pitch :foreground ,linum-hlt))))
  `(markdown-header-face-1 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-2 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-3 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-4 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-5 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-6 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-7 ((t (:foreground ,header :inherit default))))
  `(markdown-header-face-8 ((t (:foreground ,header :inherit default))))
  `(markdown-markup-face ((t (:inherit fixed-pitch :foreground ,markdown-markup))))
  `(markdown-inline-code-face ((t (:inherit fixed-pitch))))
  `(markdown-metadata-key-face ((t (:inherit fixed-pitch :foreground ,markdown-metadata))))
  `(markdown-metadata-value-face ((t (:inherit fixed-pitch :foreground ,fg))))
  `(markdown-language-keyword-face ((t (:foreground ,markdown-language))))
  `(markdown-list-face ((t (:inherit fixed-pitch :foreground ,markdown-list))))
  `(markdown-code-face ((t (:inherit fixed-pitch :foreground ,fg :background ,markdown-code-bg))))
  `(markdown-pre-face ((t (:inherit fixed-pitch :color ,fg :background ,markdown-pre-bg))))
  `(markdown-header-delimiter-face ((t (:inherit fixed-pitch :foreground ,markdown-header-delimiter))))
  `(markdown-header-rule-face ((t (:inherit fixed-pitch :foreground ,markdown-header-delimiter))))
  `(markdown-url-face ((t (:inherit fixed-pitch :foreground ,link))))
  `(imenu-list-entry-face-0 ((t (:foreground ,imenu))))
  `(imenu-list-entry-face-1 ((t (:foreground ,imenu))))
  `(imenu-list-entry-face-2 ((t (:foreground ,imenu))))
  `(imenu-list-entry-face-3 ((t (:foreground ,imenu))))
  `(imenu-list-entry-face-4 ((t (:foreground ,imenu))))
  `(imenu-list-entry-face-5 ((t (:foreground ,imenu))))
  `(ein:cell-input-area ((t (:background ,org-block-bg))))
  `(ein:cell-input-prompt ((t (:foreground ,org-tag :background ,bg))))
  `(ein:cell-output-prompt ((t (:foreground ,org-tag :background ,bg))))
  `(ivy-org ((t (:inherit fixed-pitch)))))
 (custom-theme-set-variables 'kjb/test-theme
  '(line-spacing .2)))


(defun kjb/enable-variable-pitch-mode ()
  "Enables variable pitch mode. Intended for use in `add-hook'."
  (variable-pitch-mode 1))


(add-hook 'text-mode-hook #'kjb/enable-variable-pitch-mode)

(enable-theme 'kjb/test-theme)
