* Kyle's Configuration File
** meta-config
Stuff related to .emacs, .emacs.d, and generally making config work easier
*** .emacs.d
I like to have the emacs directory set relative to the .emacs file, and, correspondingly, this file:
#+BEGIN_SRC emacs-lisp
(setq user-emacs-directory
  (file-truename (concat (getenv "HOME") "/.emacs.d/")))
#+END_SRC

*** Editing config
Work on the below once you've gone live, so you don't have to think
too hard about the alternative files right now
**** TODO Interactive function that takes me to configuration.org
This probably belongs in file map
**** TODO Interactive function that reloads config
Actually, an "eval-map" would probably be useful as well:
- Eval buffer
- Eval region
- Eval expression (honestly just use eshell)
- Eval .emacs
This could all easily exist in "SPC-e" (SPC-e-e for eshell kind of fits)
** Core Emacs Preferences
*** Scrolling/Buffer control
#+BEGIN_SRC emacs-lisp
(setq-default scroll-conservatively 5)
#+END_SRC

*** Basic visual preferences
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
(electric-pair-mode +1)
#+END_SRC
*** Backup files
Kill them So, it turns out backup files might be useful, and I might
want to consider configuring them someday. For now, auto-saves still
save me, and these files really feel like more trouble than they are
worth. See [[https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][here]] for details on how I might configure later though.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

*** Shell-command
Make sure you use .zshrc

#+BEGIN_SRC emacs-lisp
(setq shell-command-switch "-ic")
#+END_SRC

** Emacs Functions
*** Window Sizing
'kjb/cycle-window-size' is a function meant to cycle the window split
size such that (size of window)/(frame size - size of window) toggles
between 1.0 (a 50-50 window split), 1.618 (Golden ratio, current
window larger), and 0.618 (Golden ratio, current window
smaller). Right now, I just have it set up for vertical splits because
this is my primary use-case. But a small bit of refactoring should
make this usable for horizontal splits as well.
#+BEGIN_SRC emacs-lisp
(defvar cycle-window-count 0
  "Tracks which window size to cycle in kjb/cycle-window-size")

(defun kjb/window-width-from-ratio (ratio)
  "Returns desired window width such that its size in columns
  divided by the remaining frame size equals `ratio':
f = frame size
w = window size <== solve for this
r = ratio
w / (f - w) = r
w = (f - w)r
w = fr - wr
w + wr = fr
w(1 + r) = fr
w = fr / (1 + r)
"
  (let
      ((frame-curr-width (frame-width))
       (window-curr-width (window-total-width)))
    (/ (* ratio frame-curr-width) (+ 1 ratio))))

(defun kjb/window-delta-from-ratio (ratio)
  "Returns the desired delta for `enlarge-window-horizontally' so that
  window width is equal to the output from
  `kjb/window-width-from-ratio'. Returns an integer"
  (truncate (-
   (kjb/window-width-from-ratio ratio)
   (window-total-width))))

;; TODO handle when there is a single window to avoid a warning
;; message; non-urgent.
(defun kjb/cycle-window-size ()
  "Toggle window size between half, more than half (golden ratio) and less than have (gr)"
  (interactive)
  (let*
      ((ratio-map
	'((0 . 1.618)
	 (1 . 1.0)
	 (2 . 0.618))))
    (progn
      (unless
	  (and
	   (eq this-command last-command)
	   (<= cycle-window-count 2))
	(setq cycle-window-count 0))
      (enlarge-window-horizontally
       (kjb/window-delta-from-ratio
	(cdr (assoc cycle-window-count ratio-map))))
      (setq cycle-window-count (+ cycle-window-count 1)))))
#+END_SRC
** Packages
*** Use-package
**** Initialize package with correct archives
 #+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives `(("gnu" . "https://elpa.gnu.org/packages/")
                        ("melpa" . "https://melpa.org/packages/")
                        ("melpa-stable" . "https://stable.melpa.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")))

(package-initialize)
(unless package-archive-contents
(package-refresh-contents))
 #+END_SRC

**** Install use-package
 Everything after this should use use-package for management
 #+BEGIN_SRC emacs-lisp
 (unless (package-installed-p 'use-package)
   (package-install 'use-package))

 (require 'use-package)
 (setq use-package-always-ensure t)
 #+END_SRC

*** Theming
**** Spacemacs
Still haven't found a dark mode better than spacemacs
#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init
  (load-theme 'spacemacs-dark t))
#+END_SRC
**** Poet (Inactive)
Keeping poet on ice for now.
 #+BEGIN_SRC emacs-lisp
  ;; (use-package poet-theme
  ;;   :init
  ;;   (load-theme 'poet t)
  ;;   :config
  ;;   (add-hook 'text-mode-hook
  ;;           (lambda ()
  ;;             (variable-pitch-mode 1))))
 #+END_SRC

**** Fonts
***** all-the-icons
 Using font-family-list to download ATI only once
 #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :config
     (unless (member "all-the-icons" (font-family-list))
       (all-the-icons-install-fonts t)))
 #+END_SRC

*** Company
**** Base-company
I can use the better 'after-init-hook when this loaded from my actual
.emacs file. While I'm running in portable mode, however,
`emacs-startup-hook is the best I'm going to be able to do
#+BEGIN_SRC emacs-lisp
(use-package company
  :init
  (add-hook 'emacs-startup-hook #'global-company-mode))
#+END_SRC

*** Evil
**** Basic package
 #+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq-default evil-want-C-u-scroll t)
  :config
  (setq-default evil-shift-width 2) ;; lets be honest I prefer it this way
  (setq-default evil-scroll-count 10)
  (evil-mode 1))
 #+END_SRC

**** evil-escape
 #+BEGIN_SRC emacs-lisp
   (use-package evil-escape
     :config
     (evil-escape-mode))
 #+END_SRC

**** evil-nerd-commenter
 evil-nerd-commenter does a few things that comment-line and comment-dwim don't (or at least not without more work):
 - It handles regions and lines interchangeably without issue
 - It keeps the cursor on the line commented
 - It doesn't comment the next line down in visual line mode
 #+BEGIN_SRC emacs-lisp
   (use-package evil-nerd-commenter)
 #+END_SRC

*** Ivy & such
**** Base Ivy
 #+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-use-selectable-prompt t))
 #+END_SRC

**** Counsel
 #+BEGIN_SRC emacs-lisp
(use-package counsel
  :config
  (setq ivy-re-builders-alist
    '((counsel-describe-function . ivy--regex-ignore-order)
      (counsel-describe-variable . ivy--regex-ignore-order)
      (counsel-M-x . ivy--regex-ignore-order)
      (t . ivy--regex-plus)))
  (setcdr (assoc 'counsel-M-x ivy-initial-inputs-alist) "")
  (setcdr (assoc 'counsel-describe-symbol ivy-initial-inputs-alist) ""))
 #+END_SRC

**** Posframe
 Creates a floating frame for ivy-related searches
 #+BEGIN_SRC emacs-lisp
   ;; Creates a floating M-x frame
   (use-package ivy-posframe
     :config
     (setq ivy-posframe-display-functions-alist
	 '((swiper                               . ivy-posframe-display-at-point)
	   ;;(complete-symbol                    . ivy-posframe-display-at-point)
	   ;;(t                                  . ivy-posframe-display)
	   (counsel-M-x                          . ivy-posframe-display-at-window-center)
	   (counsel-rg                           . ivy-posframe-display-at-window-center)
	   (counsel-ag                           . ivy-posframe-display-at-window-center)
	   (counsel-find-file                    . ivy-posframe-display-at-window-center)
	   (ivy-switch-buffer                    . ivy-posframe-display-at-window-center)
	   (counsel-describe-function            . ivy-posframe-display-at-window-center)
	   (counsel-describe-variable            . ivy-posframe-display-at-window-center)
	   (counsel-projectile-find-file         . ivy-posframe-display-at-window-center)
	   (counsel-projectile-switch-to-buffer  . ivy-posframe-display-at-window-center)
	   (counsel-projectile-switch-project    . ivy-posframe-display-at-window-center)
	   (counsel-projectile-find-dir          . ivy-posframe-display-at-window-center)
	   (counsel-projectile-ag                . ivy-posframe-display-at-window-center)
	   (counsel-fzf                          . ivy-posframe-display-at-window-center)
	   (counsel-projectile-rg                . ivy-posframe-display-at-window-center)))
     (ivy-posframe-mode 1))
 #+END_SRC

**** smex
Give me some command history!
#+BEGIN_SRC emacs-lisp
(use-package smex
  :config
  (unless (boundp smex-initialized-p)
    (smex-initialize)))
#+END_SRC

*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy)
#+END_SRC

*** Ace
Link & Window I think
**** ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

**** link-hint
ace-link is too complicated for me
#+BEGIN_SRC emacs-lisp
(use-package link-hint)
#+END_SRC

*** Projectile
**** Base projectile
 #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
     (setq projectile-completion-system 'ivy)
     (projectile-mode +1))
 #+END_SRC

**** Counsel projectile
 So that I can use posframe here as well
 #+BEGIN_SRC emacs-lisp
   (use-package counsel-projectile
     :config
     (counsel-projectile-mode))
 #+END_SRC

*** Neotree
 #+BEGIN_SRC emacs-lisp
(use-package neotree
  :init
  (setq neo-show-hidden-files t)
  ;; confirm to delete files, but not to create them
  (setq neo-confirm-create-file 'off-p)
  ;; Use all-the-icons if you're not on a terminal
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  :config
  (defun neotree-projectile ()
  "Open NeoTree using the project root, focus on current buffer file.
Borrowed from a config here: https://www.emacswiki.org/emacs/NeoTree.
If neotree is open, closes it."
    (interactive)
    (if (neo-global--window-exists-p)
        (neotree-toggle)
        (let ((project-dir (projectile-project-root))
              (file-name (buffer-file-name)))
          (if project-dir
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name))
            (message "Could not find git project root.")))))

  (add-hook 'neotree-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
              (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-stretch-toggle)
              (define-key evil-normal-state-local-map (kbd "gr") 'neotree-refresh)
              (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
              (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node))))
 #+END_SRC

*** Magit
**** Base Package
 Still much to do here. Need to evil-ify it, for one
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (setq-default magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1))
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init 'magit))
#+END_SRC

**** Magit Customizations
I don't like the control-oriented confirm/cancel commands when working
with commit messages. Stealing the key-mapping from spacemacs here
because I don't use the comma in my day-to-day editing
#+BEGIN_SRC emacs-lisp
(defvar with-editor-custom-map (make-sparse-keymap)
  "I want a with-editor leader that isn't ctrl-oriented")
(define-key with-editor-custom-map (kbd "k") 'with-editor-cancel)
(define-key with-editor-custom-map (kbd "c") 'with-editor-finish)

(add-hook 'with-editor-mode-hook
	  (lambda ()
	    (define-key evil-motion-state-local-map (kbd ",") with-editor-custom-map)))
#+END_SRC

*** IEdit
#+BEGIN_SRC emacs-lisp
(use-package iedit)
(use-package evil-iedit-state)
#+END_SRC

*** Dired-hacks
**** dired-subtree
Enables a "tree-like" dired navigation
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :config
  (setq-default dired-subtree-use-backgrounds nil))
#+END_SRC

*** TODO Language Support
 Need to fill this out
 - Major modes that need work:
     - Python
     - Rust (in progress)
     - Typescript/Javascript
     - Java
     - C#
     - Ruby
**** DONE General
CLOSED: [2020-10-29 Thu 21:25]
#+BEGIN_SRC emacs-lisp
(use-package flycheck)
(use-package lsp-mode)
(use-package lsp-ui)
#+END_SRC

**** DONE rust
CLOSED: [2020-10-29 Thu 22:45]
 #+BEGIN_SRC emacs-lisp
(use-package rustic)
 #+END_SRC

**** DONE Kotlin
CLOSED: [2021-01-19 Tue 20:33]
 #+BEGIN_SRC emacs-lisp
   (use-package kotlin-mode)
 #+END_SRC
**** TODO typescript/javascript
***** typescript-mode
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode)
#+END_SRC
**** TODO java
**** TODO python
**** TODO ruby
**** TODO c#

**** DONE Web Files
CLOSED: [2021-04-03 Sat 19:38]
Using web-mode for html/mustache/php & variants.
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :config
  (setq-default web-mode-markup-indent-offset 2)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC
** TODO Code Editing
This is where you can set up all the lsp stuff
*** DONE General
CLOSED: [2021-01-19 Tue 20:33]
Here might be a good place to define the generic functions discussed
in the [[Language Map]] section. For now, see that defined submap for
generic keybindings.

Also here is where I should define some common preferences, such as
'lsp-ui-sideline-mode and disabling 'lsp-ui-doc-mode

"Return" sends cursor to the selected reference, kills the xref buffer:
#+BEGIN_SRC emacs-lisp
(evil-define-key 'motion xref--xref-buffer-mode-map (kbd "RET")
  (lambda ()
    (interactive)
    (xref-goto-xref 't)))
#+END_SRC

Make sure that  garbage collection and process reading are up to modern sizes
#+BEGIN_SRC emacs-lisp
;; 100mb
(setq gc-cons-threshold 100000000)
;; 1mb
(setq read-process-output-max (* 1024 1024))
#+END_SRC

*** DONE Rust
CLOSED: [2020-10-29 Thu 21:51]
Assumes rust-analyzer installed

#+BEGIN_SRC emacs-lisp
(add-hook 'rust-mode-hook (
                            lambda ()
                                ;; Default is 'rust-analyzer because of rustic
                                (setq rust-indent-offset 2)
                                (eval (lsp))
                                (eval (lsp-ui-doc-enable nil))
                                (eval (lsp-ui-sideline-mode))
                                (setq lsp-ui-sideline-show-hover 't)
                                (setq lsp-ui-sideline-show-diagnostics 't)
                                )
)
#+END_SRC

*** DONE Typescript/javascript
CLOSED: [2020-10-31 Sat 12:21]
Using https://github.com/sourcegraph/javascript-typescript-langserver for now, which is deprecated. Should switch to Theia
Actually it's not clear, this may be using theide. Need to research further
Tide might be the best answer actually: https://github.com/ananthakumaran/tide

After installing on a fresh machine it appears that you get walked
through the install. NPM is a dependency but that's all. Could try
tide at some point but lsp ui is so nice
**** typescript
#+BEGIN_SRC emacs-lisp
(add-hook 'typescript-mode-hook
	  (lambda ()
	    (setq lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file=/Users/kybarton/ts-ls-log.txt"))
	    (setq typescript-indent-level 2)
	    (eval (lsp))
	    (eval (lsp-ui-doc-enable nil))))
#+END_SRC

**** javascript
#+BEGIN_SRC emacs-lisp
(add-hook 'js-mode-hook
	  (lambda ()
	    (setq lsp-clients-typescript-server-args '("--stdio" "--tsserver-log-file=/Users/kybarton/ts-ls-log.txt"))
	    (eval (lsp))
	    (eval (lsp-ui-doc-enable nil))))
#+END_SRC

*** DONE Java
CLOSED: [2020-11-04 Wed 16:51]
*note* this is really only going to work on emacs 27+. You need native
 json support to handle a java project of any significant size
#+BEGIN_SRC emacs-lisp
(use-package lsp-java
  :config
  (setq lsp-enable-on-type-formatting nil)
  (setq lsp-java-format-on-type-enabled nil)
  (setq lsp-java-vmargs
	(list
	 "-noverify"
	 "-Xmx1G"
	 "-XX:+UseG1GC"
	 "-XX:+UseStringDeduplication"
	 "-javaagent:/Users/kybarton/.lombok/lombok.jar"))) ;; tentatively the default location for lombok I guess

(add-hook 'java-mode-hook
	  (lambda ()
      (setq indent-tabs-mode nil)
	    (eval (lsp))
	    (eval (lsp-ui-doc-enable-nil))
	    (setq lsp-ui-sideline-show-hover 't)))
#+END_SRC
**** TODO make the location of lombok more generic
*** C
Assumes that [[https://github.com/MaskRay/ccls][ccls]] is installed.
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-hook (
                            lambda ()
                                (eval (lsp))
                                (eval (lsp-ui-doc-enable nil))
                                (eval (lsp-ui-sideline-mode))
                                (setq lsp-ui-sideline-show-hover 't)
                                (setq lsp-ui-sideline-show-diagnostics 't)))
#+END_SRC
*** TODO Python
*** TODO Ruby
*** TODO C#
** Org
*THISISBOLD* /this italics/ +this strikethrough+ _this underline_
#+BEGIN_SRC emacs-lisp
(setq-default org-startup-indented 't)
(setq-default org-pretty-entities 't)
(setq-default org-log-done 'time)
(setq-default org-startup-with-inline-images 't)
(evil-define-key 'normal org-mode-map (kbd "t") 'org-todo)
;; Don't evil-auto-indent in org mode pls
(add-hook 'org-mode-hook (
			  lambda ()
				 (setq evil-auto-indent nil)))
#+END_SRC

** Key Maps
*** Misc
Place for me to append key-mappings for various minor modes, which
don't necessarily have a good organization right now
**** ansi-term
Enable some pasting
#+BEGIN_SRC emacs-lisp
(evil-define-key 'normal term-raw-map (kbd "p") 'term-paste)
#+END_SRC

*** Sub-maps
**** Help Functions
 #+BEGIN_SRC emacs-lisp
   (defvar help-map (make-sparse-keymap)
     "Help & describe functions. General documentation")
   (define-key help-map (kbd "f") 'counsel-describe-function)
   (define-key help-map (kbd "v") 'counsel-describe-variable)
   (define-key help-map (kbd "k") 'describe-key)
 #+END_SRC

**** Buffer Manipulation
 #+BEGIN_SRC emacs-lisp
(defvar buffer-map (make-sparse-keymap)
    "Buffer manipulation")
(define-key buffer-map (kbd "d") 'kill-buffer-and-window)
(define-key buffer-map (kbd "b") 'ivy-switch-buffer)
(define-key buffer-map (kbd "s")
  (lambda ()
    (interactive)
    (switch-to-buffer "*scratch*")))
 #+END_SRC

**** Window Manipulation
 #+BEGIN_SRC emacs-lisp
(defvar window-map (make-sparse-keymap)
  "Window manipulation")
(define-key window-map (kbd "k") 'windmove-up)
(define-key window-map (kbd "j") 'windmove-down)
(define-key window-map (kbd "h") 'windmove-left)
(define-key window-map (kbd "l") 'windmove-right)
(define-key window-map (kbd "d") 'delete-window)
(define-key window-map (kbd "D") 'ace-delete-window)
(define-key window-map (kbd "w") 'ace-select-window)
(define-key window-map (kbd "=") 'balance-windows)
(define-key window-map (kbd "r") 'kjb/cycle-window-size)
 #+END_SRC

**** Execution Map
#+BEGIN_SRC emacs-lisp
(defvar execution-map (make-sparse-keymap)
  "Common executions")
(define-key execution-map (kbd "e") 'eshell)
(define-key execution-map (kbd "s") 'async-shell-command)
(define-key execution-map (kbd "b") 'eval-buffer)
(define-key execution-map (kbd "r") 'eval-region)
(define-key execution-map (kbd "ps") 'projectile-run-async-shell-command-in-root)
#+END_SRC

**** File Manipulation
 #+BEGIN_SRC emacs-lisp
(defvar file-map (make-sparse-keymap)
  "File manipulation")
(define-key file-map (kbd "s") 'save-buffer)
(define-key file-map (kbd "f") 'counsel-find-file)
 #+END_SRC

**** Dired Maps
***** Dired Activation/Control
 #+BEGIN_SRC emacs-lisp
   (defvar dired-activate-map (make-sparse-keymap)
     "Activating dired in various locations")
   (define-key dired-activate-map (kbd ".") ;; open dired in current dir
     (lambda ()
       (interactive)
       (dired default-directory)))
   (define-key dired-activate-map (kbd "p") ;; open dired in project dir
     (lambda ()
       (interactive)
       (dired (projectile-project-root))))
 #+END_SRC

***** Dired Mode
 Simple function to retreat out of a dired subdir
 #+BEGIN_SRC emacs-lisp
   ;; kills subdir, puts cursor on its location in parent subdir
   (defun dired-retreat-from-subdir ()
     (interactive)
     (let ((parent-dir (dired-current-directory)))
       (dired-subtree-remove)
       (dired-goto-file parent-dir)))
 #+END_SRC

dwim function so that I keep a dired buffer around as needed
#+BEGIN_SRC emacs-lisp
(defun dired-find-file-dwim ()
  "Dired-find-file for actual files, and dired-find-alternate-file for
directories. This way, I don't litter with a bunch of dired buffers,
but I preserve one when I visit a file"
  (interactive)
  (let
      (
       (point-file (dired-get-file-for-visit))
       )
    (if
	(file-directory-p point-file)
	;; I use dired functions instead of find-file
	;; or find-alternate-file directly, because there is some
	;; safety logic on dired's side that I don't want to recreate
	(dired-find-alternate-file)
	(dired-find-file))
  ))
#+END_SRC

  I hate pretty much all dired defaults.
  Maybe try to deactivate the default keymap somehow?
  Overall keybindings look good here, but I should change this to match my mental model:
  I'd like ONE dired buffer, filled with subdirs as needed. Quick command (SPC-d-d) sends
  me back to that buffer. RET is mapped to opening a subdir for dirs, and opening a file (non-alternate)
  for files. This could make dired my central "shell" command center if I can create a command to run
  a shell command from 'dired-current-directory
 #+BEGIN_SRC emacs-lisp
   (put 'dired-find-alternate-file 'disabled nil) ;; why on earth is this disabled?
   (define-key dired-mode-map (kbd "RET") 'dired-find-file-dwim)
   ;; Go up a dir unless you're in a subdir, in which case collapse it
   (define-key dired-mode-map (kbd "u")
     (lambda ()
       (interactive)
       (if (equal (dired-current-directory) (expand-file-name default-directory))
	 ;; we're at the top level, go to ".."
	 (find-alternate-file "..")
	 ;; else, we're in a subdir, so close it
	 (dired-retreat-from-subdir))))
   (define-key dired-mode-map (kbd "n") 'evil-search-next)
   (define-key dired-mode-map (kbd "w") 'evil-forward-word-begin)
   (define-key dired-mode-map (kbd "v") 'evil-visual-char)
   (define-key dired-mode-map (kbd "x") 'dired-retreat-from-subdir)
   (define-key dired-mode-map (kbd "TAB") 'dired-subtree-insert)
   (define-key dired-mode-map (kbd "$") 'evil-end-of-line)
   (define-key dired-mode-map (kbd "g") 'revert-buffer)
 #+END_SRC

**** Search
Note: Probably best to write this stuff in init.el, and move over afterwards
Intense filesystem/symbol searches here.
- Assumes ag installed
- Assumes fzf installed
#+BEGIN_SRC emacs-lisp
(defvar search-map (make-sparse-keymap)
  "Search utilities")
(define-key search-map (kbd "f") 'counsel-fzf)
(define-key search-map (kbd "s") 'counsel-ag)
(define-key search-map (kbd "e") 'evil-iedit-state/iedit-mode)
#+END_SRC

**** Project Manipulation
Extending/customizing the projectile command map as needed here.Using
ag for now because it's a little more ubiquitous, but I can move over
to ripgrep if there's a compelling reason.
The below search function basically mimics counsel-projectile-ag, but
for some reason posframe isn't working with counsel-projectile-ag, but
does with counsel-ag.
*NOTE* The below mapping causes an error on reload because projectile
tries to map things behind "s". No effect on my workflow for now, but
there error will happen everytime I reload config
#+BEGIN_SRC emacs-lisp
(define-key projectile-command-map (kbd "t") 'neotree-projectile)
(define-key projectile-command-map (kbd "s")
  (lambda ()
    (interactive)
    (counsel-ag nil (projectile-project-root))))
#+END_SRC

**** Jump Map
Jumping around buffers
#+BEGIN_SRC emacs-lisp
(defvar jump-map (make-sparse-keymap)
  "Keys for jumping around places, primarily with avy")

(define-key jump-map (kbd "l") 'avy-goto-line)
#+END_SRC

**** Link Map
Opening & copying links
#+BEGIN_SRC emacs-lisp
(defvar link-map (make-sparse-keymap)
  "Utilities for opening links")

(define-key link-map (kbd "o") 'link-hint-open-link)
(define-key link-map (kbd "c") 'link-hint-copy-link)
#+END_SRC

**** Language Map
Submap for lsp-related functions primarily, but should hold any
sementic "language"-related manipulations.

One nice improvement would
be to define generic functions, e.g. 'rename-impl, which would wrap
the dependency on lsp and define backup functions for situations where
lsp-mode is not active
#+BEGIN_SRC emacs-lisp
(defvar language-map (make-sparse-keymap)
  "Mappings for various language/lsp bindings and manipulation")

(define-key language-map (kbd "rr") 'lsp-rename)
(define-key language-map (kbd "gr") 'lsp-find-references)
(define-key language-map (kbd "aa") 'lsp-execute-code-action)
(define-key language-map (kbd "fp") 'fill-paragraph)
#+END_SRC

*** Top-level-map
It needs to happen after submaps are defined
#+BEGIN_SRC emacs-lisp
(defvar top-level-map (make-sparse-keymap)
"Top level map to send functions to delegate maps")
;; direct commands (no need for a submap here yet
(define-key top-level-map (kbd "SPC") 'counsel-M-x)
(define-key top-level-map (kbd "cl") 'evilnc-comment-or-uncomment-lines)
(define-key top-level-map (kbd "u") 'universal-argument)
;; To submaps
(define-key top-level-map (kbd "e") execution-map)
(define-key top-level-map (kbd "w") window-map)
(define-key top-level-map (kbd "f") file-map)
(define-key top-level-map (kbd "b") buffer-map)
(define-key top-level-map (kbd "h") help-map)
(define-key top-level-map (kbd "d") dired-activate-map)
(define-key top-level-map (kbd "s") search-map)
(define-key top-level-map (kbd "j") jump-map)
(define-key top-level-map (kbd "x") link-map)
(define-key top-level-map (kbd "l") language-map)
;; Projectile has its own submap
(define-key top-level-map (kbd "p") projectile-command-map)

(evil-define-key 'motion 'global (kbd "SPC") top-level-map)
;; Info mode; another special one
(evil-define-key 'motion Info-mode-map (kbd "SPC") top-level-map)
;; this is a problem from an organization standpoint. It should live in the dired space
(define-key dired-mode-map (kbd "SPC") top-level-map)
;; same with magit
(define-key magit-status-mode-map (kbd "SPC") top-level-map)
;; This jump-back command gels nicely with "gd"
(evil-define-key 'motion 'global (kbd "gb") 'evil-jump-backward)
#+END_SRC

** Further work needed
*** TODO Organize this file a little better
**** DONE Load packages in a single section
CLOSED: [2020-10-27 Tue 22:39]
**** TODO Organize the remainder by domain
**** DONE Finally, key maps at the end
CLOSED: [2020-10-29 Thu 21:13]
*** DONE Org-mode
CLOSED: [2020-10-27 Tue 22:38]
Enable pretty mode, indents, etc
*** TODO Eshell/terminals
Get aliases set up, pretty prompt, maybe hook into dired/magit nicely.
**** TODO Eshell
Eshell is going to have to be a passion project for the most part. Lots of customizations here are possible:
***** TODO Make the prompt pretty
***** TODO Define an aliases file in a discoverable place
***** TODO ergonomic function to pipe output to scratch
***** TODO ergonomic function to pipe background function to a named buffer
e.g. ssh forwarding proxies
*** DONE Advanced Ivy
CLOSED: [2020-10-31 Sat 13:06]
Better search features/shortcuts, really just scratching the surface here I think
**** DONE Get +counsel-locate+ counsel-fzf up and running for intense filesystem file searches
CLOSED: [2020-10-28 Wed 21:55]
**** DONE Get counsel-ag up for both large filesystem symbol searches, and project scoping
CLOSED: [2020-10-28 Wed 21:55]
**** DONE Move to ivy-regex-ignore-orer for some searches (functions/variables/M-x, probably)
CLOSED: [2020-10-31 Sat 13:06]
*** DONE Multi-cursor editor
CLOSED: [2020-11-01 Sun 09:43]
IEdit perhaps? Look at alternatives
*** DONE Line jump/buffer nav
CLOSED: [2020-10-29 Thu 17:49]
avy maybe? Though it seems to struggle to perform with lsp
Mostly just jump-line, but could potentially do more char navigation with SPC-j-c
*** TODO TRAMP
Need to find an ergonomic way to cycle through known connections without typing out the whole ssh syntax
*** DONE Autocompletion
CLOSED: [2020-10-29 Thu 20:26]
Ideally, integrated well with ivy. Probably company mode
*** DONE Opening links
CLOSED: [2020-10-29 Thu 21:13]
*** DONE Magit
CLOSED: [2020-10-28 Wed 23:34]
Like, any of it.
*** DONE Window resizing
CLOSED: [2021-04-10 Sat 12:05]
Not sure how to do this
:APRIL2021:
Figured this out! Simply using some math and
window-total-size/frame-size. I've come a long way with elisp comfort.
:END:
*** DONE Upgrade to emacs 27
CLOSED: [2020-11-01 Sun 09:27]
Native JSON parsing support, among other things. Expect +a large+ some performance improvement
** Misc Notes:
*** Your first package? thedired.el
Make a singleton dired buffer, and various commands to navigate with it:
- thedired: function to start (or kill) a singleton dired buffer, with name thedired-buffer-name
  - could have an ARG that optionally specifies the starting directory
- thedired-from-here: function to navigate thedired-buffer-name to default-directory
- that might be... it? So simple
- idk my current dired setup is pretty smooth

*** Some things while watching emacs-from-scratch on dired:
*evil-collection-define-key* to define multiple keys for a keymap!
*dired-listing-switches* can have a --group-directories-first option which might be nice
You can "kill" lines in dired, which won't delete the files/folders, but just hide them
You can "mark" files, both under point, and by regex, and then take action on them
Dired for creating & extract archives! AAHHH
w-dired (dired-toggle-read-only?) allows you to edit names like it's a buffer, and then Z Z to "commit" those changes?
*** Journey to leave the terminal
- Make dired your "shell"
- Create ergonomic "async-shell-command" commands from within the dired buffer
**** Try to write a custom ivy function for async shell commands
Example/docs here https://oremacs.com/swiper/#example---counsel-locate
Also available on info-mode iirc
**** Pythong virtualenv's
https://github.com/jorgenschaefer/pyvenv seems to be a solution here
