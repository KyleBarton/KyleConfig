* This is a configuration file
** TODO Need to add all config here more gracefully
#+BEGIN_SRC emacs-lisp

  ;; Theme, Font, & Appearance
  (use-package poet-theme
    :config
    (load-theme 'poet t)
    (add-hook 'text-mode-hook
	     (lambda ()
	      (variable-pitch-mode 1))))

  ;; Evil

  (use-package evil
    :init
    (setq evil-want-C-u-scroll t)
    :config
    (setq evil-shift-width 2) ;; lets be honest I prefer it this way
    (evil-mode 1))

  (use-package evil-escape
    :config
    (evil-escape-mode))

  ;; Evil-nerd commenter does a few things that comment-line and comment-dwim don't (or at least not without more work):
  ;; 1. It handles regions and lines interchangeably without issue
  ;; 2. Keeps the cursor on the line commented
  ;; 3. Doesn't comment the next line down in visual line mode
  (use-package evil-nerd-commenter)

  ;; Ivy (comparing with helm)
  (use-package ivy
    :config
    (ivy-mode)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-use-selectable-prompt t))

  (use-package counsel)

  ;; Creates a floating M-x frame
  (use-package ivy-posframe
    :config
    (setq ivy-posframe-display-functions-alist
	'((swiper                               . ivy-posframe-display-at-point)
	  ;;(complete-symbol                    . ivy-posframe-display-at-point)
	  ;;(t                                  . ivy-posframe-display)
	  (counsel-M-x                          . ivy-posframe-display-at-window-center)
	  (counsel-find-file                    . ivy-posframe-display-at-window-center)
	  (ivy-switch-buffer                    . ivy-posframe-display-at-window-center)
	  (counsel-describe-function            . ivy-posframe-display-at-window-center)
	  (counsel-describe-variable            . ivy-posframe-display-at-window-center)
	  (counsel-projectile-find-file         . ivy-posframe-display-at-window-center)
	  (counsel-projectile-switch-to-buffer  . ivy-posframe-display-at-window-center)
	  (counsel-projectile-switch-project    . ivy-posframe-display-at-window-center)
	  (counsel-projectile-find-dir          . ivy-posframe-display-at-window-center)
	  (counsel-projectile-ag                . ivy-posframe-display-at-window-center)))
    (ivy-posframe-mode 1))

  ;; Projectile!
  (use-package projectile
    :ensure t
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-mode +1))

  ;; Trying counsel-projectile so I can use POSFrame on everything
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))

  ;; all-the-icons!
  (use-package all-the-icons
    :config
    (unless (member "all-the-icons" (font-family-list))
      (all-the-icons-install-fonts t)))

  ;; neotree (mostly for use with projectile)
  (use-package neotree
    :init
    (setq neo-show-hidden-files t)
    ;; confirm to delete files, but not to create them
    (setq neo-confirm-create-file 'off-p)
    ;; Use all-the-icons if you're not on a terminal
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :config
    (defun neotree-projectile ()
    "Open NeoTree using the project root, focus on current buffer file.
  Borrowed from a config here: https://www.emacswiki.org/emacs/NeoTree.
  If neotree is open, closes it."
      (interactive)
      (if (neo-global--window-exists-p)
	  (neotree-toggle)
	  (let ((project-dir (projectile-project-root))
		(file-name (buffer-file-name)))
	    (if project-dir
		(progn
		  (neotree-dir project-dir)
		  (neotree-find file-name))
	      (message "Could not find git project root.")))))

    (add-hook 'neotree-mode-hook
	      (lambda ()
		(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
		(define-key evil-normal-state-local-map (kbd "gr") 'neotree-refresh)
		(define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
		(define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node))))

  ;; Magit -- still need to set up shortcuts, but I know I want it
  ;;;; TODO at least evil-ify it ya know
  (use-package magit)

  ;; Major Modes

  ;;;; Rust
  ;;TODO need:
  ;; indentation stuff and evil-shift-width integration
  ;; lsp stuff
  (use-package rust-mode)

  ;; TODO need to figure out how to ensure the right packages here
  ;; One idea would be to send commands to these key maps from within use-package

  (defvar help-map (make-sparse-keymap)
    "Help & describe functions. General documentation")
  (define-key help-map (kbd "f") 'counsel-describe-function)
  (define-key help-map (kbd "v") 'counsel-describe-variable)
  (define-key help-map (kbd "k") 'describe-key)

  (defvar buffer-map (make-sparse-keymap)
    "Buffer manipulation")
  (define-key buffer-map (kbd "d") 'kill-current-buffer)
  (define-key buffer-map (kbd "b") 'ivy-switch-buffer)

  (defvar window-map (make-sparse-keymap)
    "Window manipulation")
  (define-key window-map (kbd "k") 'windmove-up)
  (define-key window-map (kbd "j") 'windmove-down)
  (define-key window-map (kbd "h") 'windmove-left)
  (define-key window-map (kbd "l") 'windmove-right)
  (define-key window-map (kbd "d") 'delete-window)

  (defvar file-map (make-sparse-keymap)
    "File manipulation")
  (define-key file-map (kbd "s") 'save-buffer)
  (define-key file-map (kbd "f") 'counsel-find-file)

  (defvar dired-activate-map (make-sparse-keymap)
    "Activating dired in various locations")
  (define-key dired-activate-map (kbd ".") ;; open dired in current dir
    (lambda ()
      (interactive)
      (dired default-directory)))
  (define-key dired-activate-map (kbd "p") ;; open dired in project dir
    (lambda ()
      (interactive)
      (dired (projectile-project-root))))

  ;; additional projectile addons here
  (define-key projectile-command-map (kbd "t") 'neotree-projectile)

  (defvar top-level-map (make-sparse-keymap)
    "Top level map to send functions to delegate maps")
  ;; direct commands (no need for a submap here yet
  (define-key top-level-map (kbd "SPC") 'counsel-M-x)
  (define-key top-level-map (kbd "cl") 'evilnc-comment-or-uncomment-lines)
  (define-key top-level-map (kbd "u") 'universal-argument)
  (define-key top-level-map (kbd "ee") 'eshell)
  ;; To submaps
  (define-key top-level-map (kbd "w") window-map)
  (define-key top-level-map (kbd "f") file-map)
  (define-key top-level-map (kbd "b") buffer-map)
  (define-key top-level-map (kbd "h") help-map)
  (define-key top-level-map (kbd "d") dired-activate-map)
  ;; Projectile has its own submap
  (define-key top-level-map (kbd "p") projectile-command-map)

  (evil-define-key 'motion 'global (kbd "SPC") top-level-map)

  ;; dired

  ;; kills subdir, puts cursor on its location in parent subdir
  (defun dired-retreat-from-subdir ()
    (interactive)
    (let ((parent-dir (dired-current-directory)))
      (dired-kill-subdir)
      (dired-goto-file parent-dir)))

  ;; I hate pretty much all dired defaults.
  ;; Maybe try to deactivate the default keymap somehow?
  ;; Overall keybindings look good here, but I should change this to match my mental model:
  ;; I'd like ONE dired buffer, filled with subdirs as needed. Quick command (SPC-d-d) sends
  ;; me back to that buffer. RET is mapped to opening a subdir for dirs, and opening a file (non-alternate)
  ;; for files. This could make dired my central "shell" command center if I can create a command to run
  ;; a shell command from 'dired-current-directory
  (put 'dired-find-alternate-file 'disabled nil) ;; why on earth is this disabled?
  (define-key dired-mode-map (kbd "SPC") top-level-map)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  ;; Go up a dir unless you're in a subdir, in which case collapse it
  (define-key dired-mode-map (kbd "u")
    (lambda ()
      (interactive)
      (if (equal (dired-current-directory) (expand-file-name default-directory))
	;; we're at the top level, go to ".."
	(find-alternate-file "..")
	;; else, we're in a subdir, so close it
	(dired-retreat-from-subdir))))
  (define-key dired-mode-map (kbd "n") 'evil-search-next)
  (define-key dired-mode-map (kbd "w") 'evil-forward-word-begin)
  (define-key dired-mode-map (kbd "v") 'evil-visual-char)
  (define-key dired-mode-map (kbd "x") 'dired-retreat-from-subdir)
  (define-key dired-mode-map (kbd "TAB") 'dired-maybe-insert-subdir)
  (define-key dired-mode-map (kbd "$") 'evil-end-of-line)

  ;;;;;;;;;;;;;
  ;; IDEAS/TODOS (Misc)
  ;; - Projectile (DONE)
  ;;     - Would really like to get TreeMacs working with Projectile (DONE)
  ;;	   - Went with neotree after all, not loving TreeMacs sticky workspace design (DONE)
  ;;	   - All-the-icons (install once to reduce startup time) (DONE)
  ;; - Major modes:
  ;;     - Python
  ;;     - Rust (in progress)
  ;;     - Typescript/Javascript
  ;;     - Java
  ;;     - C#
  ;;     - Ruby
  ;; - Org mode -- TODO I think this needs to come next; this file is getting outrageous
  ;; - Good news! It looks like this comes for free with emacs. See https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration for a starting point :)
  ;; - Get Literate setup running for init.el
  ;;     - Good time to organize a bit
  ;; - Improve themes/fonts
  ;; - Neotree/some other NERDTree-like thing (DONE)
  ;; - Eshell/terminals
  ;; - More advanced search w/ivy
  ;; - Iedit/some multi-editor
  ;; - Line jumper/general buffer nav work
  ;; - Magit
  ;; - TRAMP
  ;; - Dired! How did I forget Dired!? (DONE) -- though there's much more I could do here
  ;;;;;;;;;;;;;

#+END_SRC
